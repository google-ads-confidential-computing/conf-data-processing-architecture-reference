diff --git a/hybrid/internal/hpke_context.cc b/hybrid/internal/hpke_context.cc
index b2992a7a7..ca28872f9 100644
--- a/hybrid/internal/hpke_context.cc
+++ b/hybrid/internal/hpke_context.cc
@@ -35,6 +35,7 @@ namespace tink {
 namespace internal {
 
 constexpr int kX25519KemEncodingLengthInBytes = 32;
+constexpr int kP256KemEncodingLengthInBytes = 65;
 
 std::string ConcatenatePayload(absl::string_view encapsulated_key,
                                absl::string_view ciphertext) {
@@ -47,6 +48,10 @@ util::StatusOr<HpkePayloadView> SplitPayload(const HpkeKem& kem,
     return HpkePayloadView(payload.substr(0, kX25519KemEncodingLengthInBytes),
                            payload.substr(kX25519KemEncodingLengthInBytes));
   }
+  if (kem == HpkeKem::kP256HkdfSha256) {
+    return HpkePayloadView(payload.substr(0, kP256KemEncodingLengthInBytes),
+                           payload.substr(kP256KemEncodingLengthInBytes));
+  }
   return util::Status(
       absl::StatusCode::kInvalidArgument,
       absl::StrCat("Unable to split HPKE payload for KEM type ", kem));
diff --git a/hybrid/internal/hpke_decrypt.cc b/hybrid/internal/hpke_decrypt.cc
index 8a47882e2..72772f919 100644
--- a/hybrid/internal/hpke_decrypt.cc
+++ b/hybrid/internal/hpke_decrypt.cc
@@ -58,7 +58,9 @@ util::StatusOr<std::unique_ptr<HybridDecrypt>> HpkeDecrypt::New(
                         "Recipient private key is missing HPKE parameters.");
   }
   if (recipient_private_key.public_key().params().kem() !=
-      HpkeKem::DHKEM_X25519_HKDF_SHA256) {
+      HpkeKem::DHKEM_X25519_HKDF_SHA256 &&
+      recipient_private_key.public_key().params().kem() !=
+      HpkeKem::DHKEM_P256_HKDF_SHA256) {
     return util::Status(absl::StatusCode::kInvalidArgument,
                         "Recipient private key has an unsupported KEM");
   }
diff --git a/hybrid/internal/hpke_encrypt.cc b/hybrid/internal/hpke_encrypt.cc
index 7f23feb42..92812f0e7 100644
--- a/hybrid/internal/hpke_encrypt.cc
+++ b/hybrid/internal/hpke_encrypt.cc
@@ -48,7 +48,9 @@ util::StatusOr<std::unique_ptr<HybridEncrypt>> HpkeEncrypt::New(
                         "Recipient public key is missing HPKE parameters.");
   }
   if (recipient_public_key.params().kem() !=
-      HpkeKem::DHKEM_X25519_HKDF_SHA256) {
+      HpkeKem::DHKEM_X25519_HKDF_SHA256 
+      && recipient_public_key.params().kem() !=
+      HpkeKem::DHKEM_P256_HKDF_SHA256) {
     return util::Status(absl::StatusCode::kInvalidArgument,
                         "Recipient public key has an unsupported KEM");
   }
diff --git a/hybrid/internal/hpke_util.cc b/hybrid/internal/hpke_util.cc
index c43a023d4..071fe25f0 100644
--- a/hybrid/internal/hpke_util.cc
+++ b/hybrid/internal/hpke_util.cc
@@ -35,6 +35,8 @@ util::StatusOr<HpkeKem> HpkeKemProtoToEnum(google::crypto::tink::HpkeKem kem) {
   switch (kem) {
     case google::crypto::tink::HpkeKem::DHKEM_X25519_HKDF_SHA256:
       return HpkeKem::kX25519HkdfSha256;
+    case google::crypto::tink::HpkeKem::DHKEM_P256_HKDF_SHA256:
+      return HpkeKem::kP256HkdfSha256;
     default:
       return util::Status(
           absl::StatusCode::kInvalidArgument,
@@ -89,6 +91,10 @@ util::StatusOr<int32_t> HpkeEncapsulatedKeyLength(
       return internal::EcPointEncodingSizeInBytes(
           subtle::EllipticCurveType::CURVE25519,
           subtle::EcPointFormat::UNCOMPRESSED);
+    case google::crypto::tink::HpkeKem::DHKEM_P256_HKDF_SHA256:
+      return internal::EcPointEncodingSizeInBytes(
+          subtle::EllipticCurveType::NIST_P256,
+          subtle::EcPointFormat::UNCOMPRESSED);
     default:
       return util::Status(
           absl::StatusCode::kInvalidArgument,
diff --git a/hybrid/internal/hpke_util.h b/hybrid/internal/hpke_util.h
index 3c5fc677d..5a763cb92 100644
--- a/hybrid/internal/hpke_util.h
+++ b/hybrid/internal/hpke_util.h
@@ -29,6 +29,7 @@ namespace internal {
 // Values from https://www.rfc-editor.org/rfc/rfc9180.html#section-7.1.
 enum class HpkeKem {
   kUnknownKem = 0x0,
+  kP256HkdfSha256 = 0x10,
   kX25519HkdfSha256 = 0x20,
 };
 
diff --git a/hybrid/internal/hpke_util_boringssl.cc b/hybrid/internal/hpke_util_boringssl.cc
index a05d1072a..1f8f0e106 100644
--- a/hybrid/internal/hpke_util_boringssl.cc
+++ b/hybrid/internal/hpke_util_boringssl.cc
@@ -33,6 +33,8 @@ util::StatusOr<const EVP_HPKE_KEM*> KemParam(const HpkeParams& params) {
   switch (params.kem) {
     case HpkeKem::kX25519HkdfSha256:
       return EVP_hpke_x25519_hkdf_sha256();
+    case HpkeKem::kP256HkdfSha256:
+      return EVP_hpke_p256_hkdf_sha256();
     default:
       return util::Status(
           absl::StatusCode::kInvalidArgument,
@@ -45,6 +47,8 @@ util::StatusOr<const EVP_HPKE_KEM*> KemParam(
   switch (kem) {
     case google::crypto::tink::HpkeKem::DHKEM_X25519_HKDF_SHA256:
       return EVP_hpke_x25519_hkdf_sha256();
+    case google::crypto::tink::HpkeKem::DHKEM_P256_HKDF_SHA256:
+      return EVP_hpke_p256_hkdf_sha256();
     default:
       return util::Status(
           absl::StatusCode::kInvalidArgument,
diff --git a/tink_cc_deps.bzl b/tink_cc_deps.bzl
index a83c5fd42..ee0103a71 100644
--- a/tink_cc_deps.bzl
+++ b/tink_cc_deps.bzl
@@ -55,9 +55,9 @@ def tink_cc_deps():
     maybe(
         http_archive,
         name = "boringssl",
-        sha256 = "21b2086e9242b87415767fd6d2d13bd0481e2eb3c336c7ffa24b1f3d7afb09ae",
-        strip_prefix = "boringssl-667d54c96acda029523c5bf425e8eb9079dbe94a",
-        url = "https://github.com/google/boringssl/archive/667d54c96acda029523c5bf425e8eb9079dbe94a.zip",
+        sha256 = "96dd8b9be49a9954db8e3e6f75eae4c1dca1df1081b8598db4166671cfcff445",
+        strip_prefix = "boringssl-3a138e43694c381cbd3d35f3237afed5724a67e8",
+        url = "https://github.com/google/boringssl/archive/3a138e43694c381cbd3d35f3237afed5724a67e8.zip",
     )
 
     # -------------------------------------------------------------------------
