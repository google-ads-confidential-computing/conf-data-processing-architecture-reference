// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cmrt.sdk.private_key_service.v1;

option java_multiple_files = true;
option java_outer_classname = "PrivateKeyServiceProto";
option java_package = "com.google.cmrt.sdk.private_key_service.v1";

import "cc/core/common/proto/common.proto";
import "google/protobuf/timestamp.proto";

// For faster allocations of sub-messages.
option cc_enable_arenas = true;

// Service to fetch private keys.
service PrivateKeyService {
  // Fetches private keys from KeyService. These keys are
  // already decrypted.
  rpc ListPrivateKeys(ListPrivateKeysRequest)
      returns (ListPrivateKeysResponse) {}
}

// Wrap of private key.
message PrivateKey {
  // The id of the public and private key pair.
  string key_id = 1;
  // The value of the public key. It is the base64 encoded binary form
  // of google::crypto::tink::Keyset for google::crypto::tink::HpkePublicKey.
  string public_key = 2;
  // The value of the private key. It is the base64 encoded binary form
  // of google::crypto::tink::Keyset for google::crypto::tink::HpkePrivateKey.
  string private_key = 3;
  // The expiration time of the private key.
  google.protobuf.Timestamp expiration_time = 4;
  // The creation time of the private key.
  google.protobuf.Timestamp creation_time = 5;
}

// Private key service endpoint options.
message PrivateKeyEndpoint {
  // Url endpoint of the private key vending service.
  // It is the base url, the version number and "/encryptionKeys" will be
  // appended automatically internally.
  string endpoint = 1;

  // Used to create temporary credentials.
  // In AWS, it is the IAM Role ARN.
  // In GCP, it is the service account.
  string account_identity = 2;

  // The region where the key vending service is.
  // Only needed in AWS.
  string key_service_region = 3;

  // Only needed for GCP. Pool to provide workload identity.
  // Refer to
  // https://cloud.google.com/iam/docs/workload-identity-federation#pools for
  // details.
  string gcp_wip_provider = 4;

  // Only needed for GCP to use as the audience when create temporary credentials.
  // It is Optional. If it is absent, we will use the endpoint above.
  // Make sure to add the endpoint to the custom audience list of the KeyService
  // cloud run if you want to skip gcp_cloud_function_url here.
  string gcp_cloud_function_url = 5;
}

// Request to list private keys by key IDs or age.
message ListPrivateKeysRequest {
  // Given key IDs. If set, don't honor the max_age_seconds filter.
  repeated string key_ids = 1;
  // Given age. It should be positive integer.
  // The service will return failure neither key_ids nor max_age_seconds is set.
  int64 max_age_seconds = 2;
  // The list of endpoints hosting the key splits.
  repeated PrivateKeyEndpoint key_endpoints = 3;
  // The name of the key set.
  // If not set, the request will use "" as default key set.
  // Only for GCP. AWS Key Service does not support key set.
  optional string key_set_name = 4;
}

// Response of listing private keys by key IDs or age.
message ListPrivateKeysResponse {
  // The execution result.
  scp.core.common.proto.ExecutionResult result = 1;
  // Returned private key list.
  repeated PrivateKey private_keys = 2;
}
